.  git config --global user.name "<username>"

.  git config --global user.email <useremail>

.  git config --global init.default branch main
    creates default branch called main
   
.  clear
   same as cls on terminal
   
. git init
  initializes a git repository 			(run cmd in folder where all the files are)

. git status
  prints the name of current branch and changes pending to be pushed to staging, ONLY IN current branch

. git add <filename>
  starts tracking a file - adds file to staging until it is pushed to a branch, until it is commited.

. git rm --cached <filename>
  removes file from being tracked

. git rm --cached -r <foldername>
  recursively removes each file in a folder from being tracked

. .gitignore file in repository folder
   
. git add --all or git add -A or git add .

. git commit -m "<comment>"

. git commit -a -m "<comment>"
  moves all modified files from current branch from working environment to commmit, skipping staging

. git commit -m "<new comment>" --amend
  amends the new comment to previous commit
  
. git commit ...  --date=format:relative:x.unit.ago
  sneaky way of not getting in trouble
  
. git push -u origin main
  to be used after git branch -M main
  push to "main"

. git diff
  prints modifications to tracked files
	
. git restore <filename
  downloads and replaces the file in the working repository with the file in the cloud
	
. git restore --staged <filename>
  moves a modified file from staging to working environment
	
. git rm "<filename>"
  removes a file from repository folder
	
. git mv "<original filename>" "<new filename>"
  changes file name
  
. git log
  log of commit
  
. git log --oneline
  brief log of commit
  
. git log -p
  prints specifically what has changed with each commit (need to press arrows to browse)
  
. git help

. git reset <id of commit>
  restores (downloads and replaces) the working environment with the version of repository after the commit matching id
  
. git rebase -i --root
  modify commit log      (press :x to exit)

. git branch <branchname>
  creates branch
  
. git branch
  displays all branches  (branch with asterisk is the current branch)
  
. git branch -d <branchname>
  deletes branch
  
. git branch -M main
  main branch is "main"
  
. git switch <branchname>
  switches branch
  if you switch before committing changes from another branch, changes will not appear in branch switched into
  
. git merge -m "<comment>" <nameOtherBranch>
  merges the other branch with the current branch switched in    (commit changes before merging !!!!)
  
. git switch - <branchname>
  creates and switches into branch
  
. in a merge conflict : go to the file with the merge conflict and chose if HEAD (the original) should be kept or the >>>>><fileNameInOtherBranch> should be kept
  delete all unnecessary characters before saving the file and running "git commit ..." command
  
. 